{"cells":[{"metadata":{},"cell_type":"markdown","source":"**[SQL Home Page](https://www.kaggle.com/learn/intro-to-sql)**\n\n---\n"},{"metadata":{},"cell_type":"markdown","source":"# Introduction\n\n[Stack Overflow](https://stackoverflow.com/) is a widely beloved question and answer site for technical questions. You'll probably use it yourself as you keep using SQL (or any programming language). \n\nTheir data is publicly available. What cool things do you think it would be useful for?\n\nHere's one idea:\nYou could set up a service that identifies the Stack Overflow users who have demonstrated expertise with a specific technology by answering related questions about it, so someone could hire those experts for in-depth help.\n\nIn this exercise, you'll write the SQL queries that might serve as the foundation for this type of service.\n\nAs usual, run the following cell to set up our feedback system before moving on."},{"metadata":{"trusted":true},"cell_type":"code","source":"# Set up feedback system\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.sql.ex6 import *\nprint(\"Setup Complete\")","execution_count":3,"outputs":[{"output_type":"stream","text":"Using Kaggle's public dataset BigQuery integration.\nSetup Complete\n","name":"stdout"}]},{"metadata":{},"cell_type":"markdown","source":"Run the next cell to fetch the `stackoverflow` dataset."},{"metadata":{"trusted":true},"cell_type":"code","source":"from google.cloud import bigquery\n\n# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Construct a reference to the \"stackoverflow\" dataset\ndataset_ref = client.dataset(\"stackoverflow\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)","execution_count":4,"outputs":[{"output_type":"stream","text":"Using Kaggle's public dataset BigQuery integration.\n","name":"stdout"}]},{"metadata":{},"cell_type":"markdown","source":"# Exercises\n\n### 1) Explore the data\n\nBefore writing queries or **JOIN** clauses, you'll want to see what tables are available. \n\n*Hint*: Tab completion is helpful whenever you can't remember a command. Type `client.` and then hit the tab key. Don't forget the period before hitting tab."},{"metadata":{"trusted":true},"cell_type":"code","source":"# Get a list of available tables \ntables = client.list_tables(dataset_ref)\n# Your code here\nlist_of_tables =[i.table_id for i in list(tables)]\n# Print your answer\nprint(list_of_tables)\n\n# Check your answer\nq_1.check()","execution_count":8,"outputs":[{"output_type":"stream","text":"['badges', 'comments', 'post_history', 'post_links', 'posts_answers', 'posts_moderator_nomination', 'posts_orphaned_tag_wiki', 'posts_privilege_wiki', 'posts_questions', 'posts_tag_wiki', 'posts_tag_wiki_excerpt', 'posts_wiki_placeholder', 'stackoverflow_posts', 'tags', 'users', 'votes']\n","name":"stdout"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"1_ListSOTables\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"For the solution, uncomment the line below."},{"metadata":{"trusted":true},"cell_type":"code","source":"#q_1.solution()","execution_count":9,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"### 2) Review relevant tables\n\nIf you are interested in people who answer questions on a given topic, the `posts_answers` table is a natural place to look. Run the following cell, and look at the output."},{"metadata":{"trusted":true},"cell_type":"code","source":"# Construct a reference to the \"posts_answers\" table\nanswers_table_ref = dataset_ref.table(\"posts_answers\")\n\n# API request - fetch the table\nanswers_table = client.get_table(answers_table_ref)\n\n# Preview the first five lines of the \"posts_answers\" table\nclient.list_rows(answers_table, max_results=10).to_dataframe()","execution_count":10,"outputs":[{"output_type":"execute_result","execution_count":10,"data":{"text/plain":"         id title                                               body  \\\n0  61514077  None  <p>You can use \"break\" to break the loop, whic...   \n1  61514948  None  <p>Okay I solved it, I had the incorrect Strin...   \n2  61518060  None  <p>there's no such library available that sati...   \n3  61520287  None  <p>{\\n    \"error\": {\\n        \"code\": \"Forbidd...   \n4  61521694  None  <p>Solveded like now its opening, because I re...   \n5  61522691  None  <p>The solution was to create a different junc...   \n6  61525742  None  <p>You need to use the <a href=\"https://develo...   \n7  61526131  None  <p>Since you are using Eclipse IDE, you could ...   \n8  61527420  None  <p>To replace the h1 with its text content nod...   \n9  61528562  None  <p>Backbone model fetch combines the state of ...   \n\n  accepted_answer_id answer_count  comment_count community_owned_date  \\\n0               None         None              0                 None   \n1               None         None              0                 None   \n2               None         None              0                 None   \n3               None         None              1                 None   \n4               None         None              0                 None   \n5               None         None              0                 None   \n6               None         None              0                 None   \n7               None         None              0                 None   \n8               None         None              0                 None   \n9               None         None              0                 None   \n\n                     creation_date favorite_count  \\\n0 2020-04-30 00:45:21.430000+00:00           None   \n1 2020-04-30 02:31:51.440000+00:00           None   \n2 2020-04-30 07:29:01.820000+00:00           None   \n3 2020-04-30 09:34:29.533000+00:00           None   \n4 2020-04-30 10:50:25.500000+00:00           None   \n5 2020-04-30 11:49:18.220000+00:00           None   \n6 2020-04-30 14:27:48.390000+00:00           None   \n7 2020-04-30 14:45:36.037000+00:00           None   \n8 2020-04-30 15:48:06.933000+00:00           None   \n9 2020-04-30 16:45:11.680000+00:00           None   \n\n                last_activity_date last_edit_date last_editor_display_name  \\\n0 2020-04-30 00:45:21.430000+00:00           None                     None   \n1 2020-04-30 02:31:51.440000+00:00           None                     None   \n2 2020-04-30 07:29:01.820000+00:00           None                     None   \n3 2020-04-30 09:34:29.533000+00:00           None                     None   \n4 2020-04-30 10:50:25.500000+00:00           None                     None   \n5 2020-04-30 11:49:18.220000+00:00           None                     None   \n6 2020-04-30 14:27:48.390000+00:00           None                     None   \n7 2020-04-30 14:45:36.037000+00:00           None                     None   \n8 2020-04-30 15:48:06.933000+00:00           None                     None   \n9 2020-04-30 16:45:11.680000+00:00           None                     None   \n\n  last_editor_user_id owner_display_name owner_user_id  parent_id  \\\n0                None       user13366406          None    7951690   \n1                None        user9969622          None   61470541   \n2                None       user13317089          None   61311006   \n3                None        user4746302          None   61519229   \n4                None       user13388525          None   61520555   \n5                None       user10615718          None   61349262   \n6                None         user670839          None    3033130   \n7                None       user13441050          None   57784051   \n8                None         user670839          None   10810940   \n9                None       user13234994          None   61268518   \n\n   post_type_id  score  tags view_count  \n0             2      0  None       None  \n1             2      0  None       None  \n2             2      0  None       None  \n3             2      0  None       None  \n4             2      0  None       None  \n5             2      0  None       None  \n6             2      0  None       None  \n7             2      0  None       None  \n8             2      0  None       None  \n9             2      0  None       None  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>body</th>\n      <th>accepted_answer_id</th>\n      <th>answer_count</th>\n      <th>comment_count</th>\n      <th>community_owned_date</th>\n      <th>creation_date</th>\n      <th>favorite_count</th>\n      <th>last_activity_date</th>\n      <th>last_edit_date</th>\n      <th>last_editor_display_name</th>\n      <th>last_editor_user_id</th>\n      <th>owner_display_name</th>\n      <th>owner_user_id</th>\n      <th>parent_id</th>\n      <th>post_type_id</th>\n      <th>score</th>\n      <th>tags</th>\n      <th>view_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>61514077</td>\n      <td>None</td>\n      <td>&lt;p&gt;You can use \"break\" to break the loop, whic...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-04-30 00:45:21.430000+00:00</td>\n      <td>None</td>\n      <td>2020-04-30 00:45:21.430000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>user13366406</td>\n      <td>None</td>\n      <td>7951690</td>\n      <td>2</td>\n      <td>0</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>61514948</td>\n      <td>None</td>\n      <td>&lt;p&gt;Okay I solved it, I had the incorrect Strin...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-04-30 02:31:51.440000+00:00</td>\n      <td>None</td>\n      <td>2020-04-30 02:31:51.440000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>user9969622</td>\n      <td>None</td>\n      <td>61470541</td>\n      <td>2</td>\n      <td>0</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>61518060</td>\n      <td>None</td>\n      <td>&lt;p&gt;there's no such library available that sati...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-04-30 07:29:01.820000+00:00</td>\n      <td>None</td>\n      <td>2020-04-30 07:29:01.820000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>user13317089</td>\n      <td>None</td>\n      <td>61311006</td>\n      <td>2</td>\n      <td>0</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>61520287</td>\n      <td>None</td>\n      <td>&lt;p&gt;{\\n    \"error\": {\\n        \"code\": \"Forbidd...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>1</td>\n      <td>None</td>\n      <td>2020-04-30 09:34:29.533000+00:00</td>\n      <td>None</td>\n      <td>2020-04-30 09:34:29.533000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>user4746302</td>\n      <td>None</td>\n      <td>61519229</td>\n      <td>2</td>\n      <td>0</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>61521694</td>\n      <td>None</td>\n      <td>&lt;p&gt;Solveded like now its opening, because I re...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-04-30 10:50:25.500000+00:00</td>\n      <td>None</td>\n      <td>2020-04-30 10:50:25.500000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>user13388525</td>\n      <td>None</td>\n      <td>61520555</td>\n      <td>2</td>\n      <td>0</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>61522691</td>\n      <td>None</td>\n      <td>&lt;p&gt;The solution was to create a different junc...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-04-30 11:49:18.220000+00:00</td>\n      <td>None</td>\n      <td>2020-04-30 11:49:18.220000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>user10615718</td>\n      <td>None</td>\n      <td>61349262</td>\n      <td>2</td>\n      <td>0</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>61525742</td>\n      <td>None</td>\n      <td>&lt;p&gt;You need to use the &lt;a href=\"https://develo...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-04-30 14:27:48.390000+00:00</td>\n      <td>None</td>\n      <td>2020-04-30 14:27:48.390000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>user670839</td>\n      <td>None</td>\n      <td>3033130</td>\n      <td>2</td>\n      <td>0</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>61526131</td>\n      <td>None</td>\n      <td>&lt;p&gt;Since you are using Eclipse IDE, you could ...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-04-30 14:45:36.037000+00:00</td>\n      <td>None</td>\n      <td>2020-04-30 14:45:36.037000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>user13441050</td>\n      <td>None</td>\n      <td>57784051</td>\n      <td>2</td>\n      <td>0</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>61527420</td>\n      <td>None</td>\n      <td>&lt;p&gt;To replace the h1 with its text content nod...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-04-30 15:48:06.933000+00:00</td>\n      <td>None</td>\n      <td>2020-04-30 15:48:06.933000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>user670839</td>\n      <td>None</td>\n      <td>10810940</td>\n      <td>2</td>\n      <td>0</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>61528562</td>\n      <td>None</td>\n      <td>&lt;p&gt;Backbone model fetch combines the state of ...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-04-30 16:45:11.680000+00:00</td>\n      <td>None</td>\n      <td>2020-04-30 16:45:11.680000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>user13234994</td>\n      <td>None</td>\n      <td>61268518</td>\n      <td>2</td>\n      <td>0</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"It isn't clear yet how to find users who answered questions on any given topic. But `posts_answers` has a `parent_id` column. If you are familiar with the Stack Overflow site, you might figure out that the `parent_id` is the question each post is answering.\n\nLook at `posts_questions` using the cell below."},{"metadata":{"trusted":true},"cell_type":"code","source":"# Construct a reference to the \"posts_questions\" table\nquestions_table_ref = dataset_ref.table(\"posts_questions\")\n\n# API request - fetch the table\nquestions_table = client.get_table(questions_table_ref)\n\n# Preview the first five lines of the \"posts_questions\" table\nclient.list_rows(questions_table, max_results=10).to_dataframe()","execution_count":11,"outputs":[{"output_type":"execute_result","execution_count":11,"data":{"text/plain":"         id                                              title  \\\n0  62111964  Sending custom params from client on silent re...   \n1  61815842  What Cloud Storage or Service to use for excha...   \n2  61833254  How to capture redirected link and send to std...   \n3  61935894  where i should add \"clickAnalytics: true\" on f...   \n4  61936080  How to avoid uploaded file name encrypt in nodejs   \n5  61945489                              Retrieve data Laravel   \n6  61954339             zshrc doesn't convert \\u into hostname   \n7  61958644  Repeat-generator.(number) files filling up web...   \n8  62005863  Is there any service which can automatically f...   \n9  62006727  Reading yaml value using Viper from a Cobra pr...   \n\n                                                body accepted_answer_id  \\\n0  <p>Is there any way we could pass extra parame...               None   \n1  <p>Storage has to be accessed by C++ and NodeJ...               None   \n2  <p>Please I need help. Assuming I have this li...               None   \n3  <p>I want to track/add data for conversion rat...               None   \n4  <p>In my code uploaded file name saved in loca...               None   \n5  <p>Morning everyone. \\nI have 3 tables:\\n-chre...               None   \n6  <p>There is a problem with my .zshrc file. I w...               None   \n7  <p>I'm currently having a problem with my cpan...               None   \n8  <p>I want to arrive in a new city and find a r...               None   \n9  <p>Trying to read in yaml value, to be used in...               None   \n\n   answer_count  comment_count community_owned_date  \\\n0             0              0                 None   \n1             0              0                 None   \n2             0              0                 None   \n3             0              0                 None   \n4             0              0                 None   \n5             0              0                 None   \n6             0              0                 None   \n7             0              0                 None   \n8             0              0                 None   \n9             0              0                 None   \n\n                     creation_date favorite_count  \\\n0 2020-05-31 05:30:55.990000+00:00           None   \n1 2020-05-15 09:17:23.447000+00:00           None   \n2 2020-05-16 07:19:58.070000+00:00           None   \n3 2020-05-21 13:42:25.997000+00:00           None   \n4 2020-05-21 13:51:52.813000+00:00           None   \n5 2020-05-21 23:34:31.310000+00:00           None   \n6 2020-05-22 11:48:43.617000+00:00           None   \n7 2020-05-22 15:38:05.790000+00:00           None   \n8 2020-05-25 15:38:22.990000+00:00           None   \n9 2020-05-25 16:31:47.797000+00:00           None   \n\n                last_activity_date last_edit_date last_editor_display_name  \\\n0 2020-05-31 05:30:55.990000+00:00           None                     None   \n1 2020-05-15 09:17:23.447000+00:00           None                     None   \n2 2020-05-16 07:19:58.070000+00:00           None                     None   \n3 2020-05-21 13:42:25.997000+00:00           None                     None   \n4 2020-05-21 13:51:52.813000+00:00           None                     None   \n5 2020-05-21 23:34:31.310000+00:00           None                     None   \n6 2020-05-22 11:48:43.617000+00:00           None                     None   \n7 2020-05-22 15:38:05.790000+00:00           None                     None   \n8 2020-05-25 15:38:22.990000+00:00           None                     None   \n9 2020-05-25 16:31:47.797000+00:00           None                     None   \n\n  last_editor_user_id owner_display_name  owner_user_id parent_id  \\\n0                None               None       10062258      None   \n1                None               None        2182080      None   \n2                None               None       11375445      None   \n3                None               None       13120736      None   \n4                None               None       13576535      None   \n5                None               None        8725358      None   \n6                None               None        9258458      None   \n7                None               None       11484898      None   \n8                None               None       12121473      None   \n9                None               None         699215      None   \n\n   post_type_id  score                                               tags  \\\n0             1      0  oauth-2.0|identityserver4|openiddict|angular-o...   \n1             1      0                       cloud-storage|real-time-data   \n2             1      0                            shell|url|curl|redirect   \n3             1      0                              analytics|magento-1.9   \n4             1      0                                   node.js|angular8   \n5             1      0  laravel-5|many-to-many|relationship|polymorphi...   \n6             1      0                               macos-catalina|zshrc   \n7             1      0                     web|hosting|cpanel|web-hosting   \n8             1      0                                         navigation   \n9             1      0                                        viper|cobra   \n\n   view_count  \n0           1  \n1           2  \n2           2  \n3           2  \n4           2  \n5           2  \n6           2  \n7           2  \n8           2  \n9           2  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>body</th>\n      <th>accepted_answer_id</th>\n      <th>answer_count</th>\n      <th>comment_count</th>\n      <th>community_owned_date</th>\n      <th>creation_date</th>\n      <th>favorite_count</th>\n      <th>last_activity_date</th>\n      <th>last_edit_date</th>\n      <th>last_editor_display_name</th>\n      <th>last_editor_user_id</th>\n      <th>owner_display_name</th>\n      <th>owner_user_id</th>\n      <th>parent_id</th>\n      <th>post_type_id</th>\n      <th>score</th>\n      <th>tags</th>\n      <th>view_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>62111964</td>\n      <td>Sending custom params from client on silent re...</td>\n      <td>&lt;p&gt;Is there any way we could pass extra parame...</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-05-31 05:30:55.990000+00:00</td>\n      <td>None</td>\n      <td>2020-05-31 05:30:55.990000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>10062258</td>\n      <td>None</td>\n      <td>1</td>\n      <td>0</td>\n      <td>oauth-2.0|identityserver4|openiddict|angular-o...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>61815842</td>\n      <td>What Cloud Storage or Service to use for excha...</td>\n      <td>&lt;p&gt;Storage has to be accessed by C++ and NodeJ...</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-05-15 09:17:23.447000+00:00</td>\n      <td>None</td>\n      <td>2020-05-15 09:17:23.447000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>2182080</td>\n      <td>None</td>\n      <td>1</td>\n      <td>0</td>\n      <td>cloud-storage|real-time-data</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>61833254</td>\n      <td>How to capture redirected link and send to std...</td>\n      <td>&lt;p&gt;Please I need help. Assuming I have this li...</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-05-16 07:19:58.070000+00:00</td>\n      <td>None</td>\n      <td>2020-05-16 07:19:58.070000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>11375445</td>\n      <td>None</td>\n      <td>1</td>\n      <td>0</td>\n      <td>shell|url|curl|redirect</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>61935894</td>\n      <td>where i should add \"clickAnalytics: true\" on f...</td>\n      <td>&lt;p&gt;I want to track/add data for conversion rat...</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-05-21 13:42:25.997000+00:00</td>\n      <td>None</td>\n      <td>2020-05-21 13:42:25.997000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>13120736</td>\n      <td>None</td>\n      <td>1</td>\n      <td>0</td>\n      <td>analytics|magento-1.9</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>61936080</td>\n      <td>How to avoid uploaded file name encrypt in nodejs</td>\n      <td>&lt;p&gt;In my code uploaded file name saved in loca...</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-05-21 13:51:52.813000+00:00</td>\n      <td>None</td>\n      <td>2020-05-21 13:51:52.813000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>13576535</td>\n      <td>None</td>\n      <td>1</td>\n      <td>0</td>\n      <td>node.js|angular8</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>61945489</td>\n      <td>Retrieve data Laravel</td>\n      <td>&lt;p&gt;Morning everyone. \\nI have 3 tables:\\n-chre...</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-05-21 23:34:31.310000+00:00</td>\n      <td>None</td>\n      <td>2020-05-21 23:34:31.310000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>8725358</td>\n      <td>None</td>\n      <td>1</td>\n      <td>0</td>\n      <td>laravel-5|many-to-many|relationship|polymorphi...</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>61954339</td>\n      <td>zshrc doesn't convert \\u into hostname</td>\n      <td>&lt;p&gt;There is a problem with my .zshrc file. I w...</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-05-22 11:48:43.617000+00:00</td>\n      <td>None</td>\n      <td>2020-05-22 11:48:43.617000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>9258458</td>\n      <td>None</td>\n      <td>1</td>\n      <td>0</td>\n      <td>macos-catalina|zshrc</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>61958644</td>\n      <td>Repeat-generator.(number) files filling up web...</td>\n      <td>&lt;p&gt;I'm currently having a problem with my cpan...</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-05-22 15:38:05.790000+00:00</td>\n      <td>None</td>\n      <td>2020-05-22 15:38:05.790000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>11484898</td>\n      <td>None</td>\n      <td>1</td>\n      <td>0</td>\n      <td>web|hosting|cpanel|web-hosting</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>62005863</td>\n      <td>Is there any service which can automatically f...</td>\n      <td>&lt;p&gt;I want to arrive in a new city and find a r...</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-05-25 15:38:22.990000+00:00</td>\n      <td>None</td>\n      <td>2020-05-25 15:38:22.990000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>12121473</td>\n      <td>None</td>\n      <td>1</td>\n      <td>0</td>\n      <td>navigation</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>62006727</td>\n      <td>Reading yaml value using Viper from a Cobra pr...</td>\n      <td>&lt;p&gt;Trying to read in yaml value, to be used in...</td>\n      <td>None</td>\n      <td>0</td>\n      <td>0</td>\n      <td>None</td>\n      <td>2020-05-25 16:31:47.797000+00:00</td>\n      <td>None</td>\n      <td>2020-05-25 16:31:47.797000+00:00</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>None</td>\n      <td>699215</td>\n      <td>None</td>\n      <td>1</td>\n      <td>0</td>\n      <td>viper|cobra</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"Are there any fields that identify what topic or technology each question is about? If so, how could you find the IDs of users who answered questions about a specific topic?\n\nThink about it, and then check the solution by running the code in the next cell."},{"metadata":{"trusted":true},"cell_type":"code","source":"# Check your answer (Run this code cell to receive credit!)\nq_2.solution()","execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"questionType\": 4, \"questionId\": \"2_HowToFindExperts\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Solution: \n`posts_questions` has a column called `tags` which lists the topics/technologies each question is about.\n\n`posts_answers` has a column called `parent_id` which identifies the ID of the question each answer is responding to.\n`posts_answers` also has an `owner_user_id` column which specifies the ID of the user who answered the question.\n\nYou can join these two tables to:\n- determine the `tags` for each answer, and then\n- select the `owner_user_id` of the answers on the desired tag.\n\nThis is exactly what you will do over the next few questions.","text/markdown":"<span style=\"color:#33cc99\">Solution:</span> \n`posts_questions` has a column called `tags` which lists the topics/technologies each question is about.\n\n`posts_answers` has a column called `parent_id` which identifies the ID of the question each answer is responding to.\n`posts_answers` also has an `owner_user_id` column which specifies the ID of the user who answered the question.\n\nYou can join these two tables to:\n- determine the `tags` for each answer, and then\n- select the `owner_user_id` of the answers on the desired tag.\n\nThis is exactly what you will do over the next few questions.\n"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"### 3) Selecting the right questions\n\nA lot of this data is text. \n\nWe'll explore one last technique in this course which you can apply to this text.\n\nA **WHERE** clause can limit your results to rows with certain text using the **LIKE** feature. For example, to select just the third row of the `pets` table from the tutorial, we could use the query in the picture below.\n\n![](https://i.imgur.com/RccsXBr.png) \n\nYou can also use `%` as a \"wildcard\" for any number of characters. So you can also get the third row with:\n\n```\nquery = \"\"\"\n        SELECT * \n        FROM `bigquery-public-data.pet_records.pets` \n        WHERE Name LIKE '%ipl%'\n        \"\"\"\n```\n\nTry this yourself. Write a query that selects the `id`, `title` and `owner_user_id` columns from the `posts_questions` table. \n- Restrict the results to rows that contain the word \"bigquery\" in the `tags` column. \n- Include rows where there is other text in addition to the word \"bigquery\" (e.g., if a row has a tag \"bigquery-sql\", your results should include that too)."},{"metadata":{"trusted":true},"cell_type":"code","source":"# Your code here\nquestions_query = \"\"\"\n                  SELECT id ,title, owner_user_id\n                  FROM `bigquery-public-data.stackoverflow.posts_questions`\n                  WHERE tags LIKE '%bigquery%'\n                  \"\"\"\n\n# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 1 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nquestions_query_job = client.query(questions_query ,job_config= safe_config) # Your code goes here\n\n# API request - run the query, and return a pandas DataFrame\nquestions_results = questions_query_job.to_dataframe() # Your code goes here\n\n# Preview results\nprint(questions_results.head())\n\n# Check your answer\nq_3.check()","execution_count":19,"outputs":[{"output_type":"stream","text":"         id                                              title  owner_user_id\n0  17997089      BigQuery rank() function - Resources exceeded      2276668.0\n1  18116803  Getting 401 uploading file into a table with a...       508960.0\n2  18050595  Workaround needed for the incomplete implement...      2264178.0\n3  17884358      Insufficient data written when inserting rows      1752620.0\n4  18091168                 Can't upload to BigQuery from Perl       585411.0\n","name":"stdout"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_SelectRightQuestions\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"For a hint or the solution, uncomment the appropriate line below."},{"metadata":{"trusted":true},"cell_type":"code","source":"q_3.hint()\n#q_3.solution()","execution_count":18,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 2, \"questionType\": 2, \"questionId\": \"3_SelectRightQuestions\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Hint: Your **WHERE** clause should be `WHERE tags LIKE '%bigquery%'`.","text/markdown":"<span style=\"color:#3366cc\">Hint:</span> Your **WHERE** clause should be `WHERE tags LIKE '%bigquery%'`."},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"### 4) Your first join\nNow that you have a query to select questions on any given topic (in this case, you chose \"bigquery\"), you can find the answers to those questions with a **JOIN**.  \n\nWrite a query that returns the `id`, `body` and `owner_user_id` columns from the `posts_answers` table for answers to \"bigquery\"-related questions. \n- You should have one row in your results for each answer to a question that has \"bigquery\" in the tags.  \n- Remember you can get the tags for a question from the `tags` column in the `posts_questions` table.\n\nHere's a reminder of what a **JOIN** looked like in the tutorial:\n```\nquery = \"\"\"\n        SELECT p.Name AS Pet_Name, o.Name AS Owner_Name\n        FROM `bigquery-public-data.pet_records.pets` as p\n        INNER JOIN `bigquery-public-data.pet_records.owners` as o \n            ON p.ID = o.Pet_ID\n        \"\"\"\n```\n\nIt may be useful to scroll up and review the first several rows of the `posts_answers` and `posts_questions` tables.  "},{"metadata":{"trusted":true},"cell_type":"code","source":"# Your code here\nanswers_query = \"\"\"\n                SELECT a.id, a.body, a.owner_user_id\n                FROM `bigquery-public-data.stackoverflow.posts_questions` AS q \n                INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n                    ON q.id = a.parent_id\n                WHERE q.tags LIKE '%bigquery%'\n                \"\"\"\n\n# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 1 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nanswers_query_job = client.query(answers_query, job_config=safe_config)\n\n# API request - run the query, and return a pandas DataFrame\nanswers_results = answers_query_job.to_dataframe()\n\nq_4.check()","execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"4_FirstJoin\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"For a hint or the solution, uncomment the appropriate line below."},{"metadata":{"trusted":true},"cell_type":"code","source":"q_4.hint()\nq_4.solution()","execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 2, \"questionType\": 2, \"questionId\": \"4_FirstJoin\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Hint: \nDo an **INNER JOIN** between `bigquery-public-data.stackoverflow.posts_questions` and `bigquery-public-data.stackoverflow.posts_answers`.\n\nGive `post_questions` an alias of `q`, and use `a` as an alias for `posts_answers`. The **ON** part of your join is `q.id = a.parent_id`.","text/markdown":"<span style=\"color:#3366cc\">Hint:</span> \nDo an **INNER JOIN** between `bigquery-public-data.stackoverflow.posts_questions` and `bigquery-public-data.stackoverflow.posts_answers`.\n\nGive `post_questions` an alias of `q`, and use `a` as an alias for `posts_answers`. The **ON** part of your join is `q.id = a.parent_id`.\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"questionType\": 2, \"questionId\": \"4_FirstJoin\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Solution: \n```python\n\nanswers_query = \"\"\"\n                SELECT a.id, a.body, a.owner_user_id\n                FROM `bigquery-public-data.stackoverflow.posts_questions` AS q \n                INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n                    ON q.id = a.parent_id\n                WHERE q.tags LIKE '%bigquery%'\n                \"\"\"\n                \n# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 1 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nanswers_query_job = client.query(answers_query, job_config=safe_config)\n\n# API request - run the query, and return a pandas DataFrame\nanswers_results = answers_query_job.to_dataframe()\n\n```","text/markdown":"<span style=\"color:#33cc99\">Solution:</span> \n```python\n\nanswers_query = \"\"\"\n                SELECT a.id, a.body, a.owner_user_id\n                FROM `bigquery-public-data.stackoverflow.posts_questions` AS q \n                INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n                    ON q.id = a.parent_id\n                WHERE q.tags LIKE '%bigquery%'\n                \"\"\"\n                \n# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 1 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nanswers_query_job = client.query(answers_query, job_config=safe_config)\n\n# API request - run the query, and return a pandas DataFrame\nanswers_results = answers_query_job.to_dataframe()\n\n```"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"### 5) Answer the question\nYou have the merge you need. But you want a list of users who have answered many questions... which requires more work beyond your previous result.\n\nWrite a new query that has a single row for each user who answered at least one question with a tag that includes the string \"bigquery\". Your results should have two columns:\n- `user_id` - contains the `owner_user_id` column from the `posts_answers` table\n- `number_of_answers` - contains the number of answers the user has written to \"bigquery\"-related questions"},{"metadata":{"trusted":true},"cell_type":"code","source":"# Your code here\nbigquery_experts_query =  \"\"\"\n                         SELECT a.owner_user_id AS user_id, COUNT(1) AS number_of_answers\n                         FROM `bigquery-public-data.stackoverflow.posts_questions` AS q\n                         INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n                             ON q.id = a.parent_Id\n                         WHERE q.tags LIKE '%bigquery%'\n                         GROUP BY a.owner_user_id\n                         \"\"\"\n\n# Set up the query\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nbigquery_experts_query_job = client.query(bigquery_experts_query , job_config = safe_config) # Your code goes here\n\n# API request - run the query, and return a pandas DataFrame\nbigquery_experts_results = bigquery_experts_query_job.to_dataframe() # Your code goes here\n\n# Preview results\nprint(bigquery_experts_results.head())\n\n# Check your answer\nq_5.check()","execution_count":23,"outputs":[{"output_type":"stream","text":"      user_id  number_of_answers\n0  10126509.0                  1\n1   9952196.0                  1\n2  11506172.0                  4\n3   9841408.0                  1\n4   2143551.0                  1\n","name":"stdout"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"5_BigQueryExperts\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"For a hint or the solution, uncomment the appropriate line below."},{"metadata":{"trusted":true},"cell_type":"code","source":"#q_5.hint()\n#q_5.solution()","execution_count":20,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"questionType\": 2, \"questionId\": \"5_BigQueryExperts\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Solution: \n```python\n\nbigquery_experts_query = \"\"\"\n                         SELECT a.owner_user_id AS user_id, COUNT(1) AS number_of_answers\n                         FROM `bigquery-public-data.stackoverflow.posts_questions` AS q\n                         INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n                             ON q.id = a.parent_Id\n                         WHERE q.tags LIKE '%bigquery%'\n                         GROUP BY a.owner_user_id\n                         \"\"\"\n\n# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 1 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nbigquery_experts_query_job = client.query(bigquery_experts_query, job_config=safe_config)\n\n# API request - run the query, and return a pandas DataFrame\nbigquery_experts_results = bigquery_experts_query_job.to_dataframe()\n\n```","text/markdown":"<span style=\"color:#33cc99\">Solution:</span> \n```python\n\nbigquery_experts_query = \"\"\"\n                         SELECT a.owner_user_id AS user_id, COUNT(1) AS number_of_answers\n                         FROM `bigquery-public-data.stackoverflow.posts_questions` AS q\n                         INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n                             ON q.id = a.parent_Id\n                         WHERE q.tags LIKE '%bigquery%'\n                         GROUP BY a.owner_user_id\n                         \"\"\"\n\n# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 1 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nbigquery_experts_query_job = client.query(bigquery_experts_query, job_config=safe_config)\n\n# API request - run the query, and return a pandas DataFrame\nbigquery_experts_results = bigquery_experts_query_job.to_dataframe()\n\n```"},"metadata":{}}]},{"metadata":{},"cell_type":"markdown","source":"### 6) Building a more generally useful service\n\nHow could you convert what you've done to a general function a website could call on the backend to get experts on any topic?  \n\nThink about it and then check the solution below."},{"metadata":{"trusted":false},"cell_type":"code","source":"# Check your answer (Run this code cell to receive credit!)\nq_6.solution()","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Congratulations!\n\nYou know all the key components to use BigQuery and SQL effectively. Your SQL skills are sufficient to unlock many of the world's largest datasets.\n\nWant to go play with your new powers?  Kaggle has BigQuery datasets available [here](https://www.kaggle.com/datasets?fileType=bigQuery)."},{"metadata":{},"cell_type":"markdown","source":"---\n**[SQL Home Page](https://www.kaggle.com/learn/intro-to-sql)**\n\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https://www.kaggle.com/learn-forum/161314) to chat with other Learners.*"}],"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.7.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":2}